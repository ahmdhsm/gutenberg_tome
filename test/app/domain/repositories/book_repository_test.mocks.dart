// Mocks generated by Mockito 5.4.4 from annotations
// in gutenberg_tome/test/app/domain/repositories/book_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:fpdart/fpdart.dart' as _i6;
import 'package:gutenberg_tome/app/data/datasources/book_local_data_source.dart'
    as _i4;
import 'package:gutenberg_tome/app/data/datasources/book_remote_data_source.dart'
    as _i10;
import 'package:gutenberg_tome/app/data/model/api_response_model.dart' as _i11;
import 'package:gutenberg_tome/app/data/model/book_model.dart' as _i9;
import 'package:gutenberg_tome/core/helper/dio_helper.dart' as _i3;
import 'package:gutenberg_tome/core/model/failure.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:realm/realm.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRealm_0 extends _i1.SmartFake implements _i2.Realm {
  _FakeRealm_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDioHelper_1 extends _i1.SmartFake implements _i3.DioHelper {
  _FakeDioHelper_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BookLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookLocalDataSource extends _i1.Mock
    implements _i4.BookLocalDataSource {
  MockBookLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Realm get realm => (super.noSuchMethod(
        Invocation.getter(#realm),
        returnValue: _FakeRealm_0(
          this,
          Invocation.getter(#realm),
        ),
      ) as _i2.Realm);

  @override
  _i5.Future<_i6.Either<_i7.Failure, void>> clearData() => (super.noSuchMethod(
        Invocation.method(
          #clearData,
          [],
        ),
        returnValue: _i5.Future<_i6.Either<_i7.Failure, void>>.value(
            _i8.dummyValue<_i6.Either<_i7.Failure, void>>(
          this,
          Invocation.method(
            #clearData,
            [],
          ),
        )),
      ) as _i5.Future<_i6.Either<_i7.Failure, void>>);

  @override
  _i5.Future<_i6.Either<_i7.Failure, void>> writeData(
          {required List<_i9.BookModel>? books}) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeData,
          [],
          {#books: books},
        ),
        returnValue: _i5.Future<_i6.Either<_i7.Failure, void>>.value(
            _i8.dummyValue<_i6.Either<_i7.Failure, void>>(
          this,
          Invocation.method(
            #writeData,
            [],
            {#books: books},
          ),
        )),
      ) as _i5.Future<_i6.Either<_i7.Failure, void>>);

  @override
  _i5.Future<_i6.Either<_i7.Failure, List<_i9.BookModel>>> getData() =>
      (super.noSuchMethod(
        Invocation.method(
          #getData,
          [],
        ),
        returnValue:
            _i5.Future<_i6.Either<_i7.Failure, List<_i9.BookModel>>>.value(
                _i8.dummyValue<_i6.Either<_i7.Failure, List<_i9.BookModel>>>(
          this,
          Invocation.method(
            #getData,
            [],
          ),
        )),
      ) as _i5.Future<_i6.Either<_i7.Failure, List<_i9.BookModel>>>);
}

/// A class which mocks [BookRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookRemoteDataSource extends _i1.Mock
    implements _i10.BookRemoteDataSource {
  MockBookRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.DioHelper get dioHelper => (super.noSuchMethod(
        Invocation.getter(#dioHelper),
        returnValue: _FakeDioHelper_1(
          this,
          Invocation.getter(#dioHelper),
        ),
      ) as _i3.DioHelper);

  @override
  _i5.Future<_i6.Either<_i7.Failure, _i11.ApiResponseModel>> getList(
          {required String? searchQuery}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getList,
          [],
          {#searchQuery: searchQuery},
        ),
        returnValue:
            _i5.Future<_i6.Either<_i7.Failure, _i11.ApiResponseModel>>.value(
                _i8.dummyValue<_i6.Either<_i7.Failure, _i11.ApiResponseModel>>(
          this,
          Invocation.method(
            #getList,
            [],
            {#searchQuery: searchQuery},
          ),
        )),
      ) as _i5.Future<_i6.Either<_i7.Failure, _i11.ApiResponseModel>>);

  @override
  _i5.Future<_i6.Either<_i7.Failure, _i11.ApiResponseModel>> loadMore(
          {required String? nextUrl}) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadMore,
          [],
          {#nextUrl: nextUrl},
        ),
        returnValue:
            _i5.Future<_i6.Either<_i7.Failure, _i11.ApiResponseModel>>.value(
                _i8.dummyValue<_i6.Either<_i7.Failure, _i11.ApiResponseModel>>(
          this,
          Invocation.method(
            #loadMore,
            [],
            {#nextUrl: nextUrl},
          ),
        )),
      ) as _i5.Future<_i6.Either<_i7.Failure, _i11.ApiResponseModel>>);
}
